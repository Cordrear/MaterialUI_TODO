{"version":3,"sources":["components/TaskList/TaskListItem/TaskListItem.jsx","components/TaskList/TaskList.jsx","App.js","index.js"],"names":["TaskListItem_TaskListItem","props","position","onCheck","onEdit","onDelete","onMove","_props$data","data","id","title","date","checked","daysLeft","moment","diff","expirationClass","react_default","a","createElement","index_es","key","className","onClick","primary","secondary","disabled","icons_index_es","TaskList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCreate","setState","isTaskDialogOpen","editableItemId","closeDialog","titleInputValue","dateInputValue","format","descriptionInputValue","onSave","_this$state","state","item","Date","now","description","newData","deepClone","find","task","assign","updateLocalStorage","concat","toConsumableArray","isConfirmationOpen","itemToDelete","onDeleteConfirm","indexToDelete","findIndex","splice","onDeleteCancel","localStorage","setItem","JSON","stringify","handleChange","name","event","defineProperty","target","value","resetDialogState","parse","direction","index","_ref","length","_ref2","dialogTitle","getItem","_this2","_this$state2","Fragment","variant","color","size","map","open","onClose","label","onChange","type","required","multiline","fullWidth","rowsMax","onCancel","onConfirm","React","Component","App","components_TaskList_TaskList","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a7992748.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TaskListItem.css\";\r\nimport { ListItem, Checkbox, ListItemText, Button } from \"@material-ui/core\";\r\nimport {\r\n    Edit as EditIcon,\r\n    DeleteForever as DeleteForeverIcon,\r\n    KeyboardArrowDown as DownIcon,\r\n    KeyboardArrowUp as UpIcon,\r\n} from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\n\r\nexport default (props) => {\r\n    const { position, onCheck, onEdit, onDelete, onMove } = props;\r\n    const { id, title, date, checked } = props.data;\r\n    const deadline = moment(date);\r\n    const daysLeft = deadline.diff(moment(), \"days\");\r\n    let expirationClass = \"common\";\r\n    if (daysLeft < 0) {\r\n        expirationClass = \"expired\";\r\n    } else if (daysLeft < 3) {\r\n        expirationClass = \"upcoming\";\r\n    }\r\n    return (\r\n        <ListItem key={id} className={!checked ? expirationClass : \"completed\"}>\r\n            <Checkbox checked={checked} onClick={onCheck} />\r\n            <ListItemText primary={title} className=\"list-item_title\" />\r\n            <ListItemText secondary={date} />\r\n            <Button\r\n                className=\"button\"\r\n                onClick={() => onMove(id, \"down\")}\r\n                disabled={position === \"last\" || position === \"only\"}\r\n            >\r\n                <DownIcon />\r\n            </Button>\r\n            <Button\r\n                className=\"button\"\r\n                onClick={() => onMove(id, \"up\")}\r\n                disabled={position === \"first\" || position === \"only\"}\r\n            >\r\n                <UpIcon />\r\n            </Button>\r\n            <Button className=\"button\" onClick={onEdit}>\r\n                <EditIcon />\r\n            </Button>\r\n            <Button className=\"button\" onClick={onDelete}>\r\n                <DeleteForeverIcon />\r\n            </Button>\r\n        </ListItem>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport \"./TaskList.css\";\r\nimport {\r\n    Paper,\r\n    Button,\r\n    List,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport TaskListItem from \"./TaskListItem/TaskListItem\";\r\nimport moment from \"moment\";\r\n\r\nclass TaskList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: [],\r\n            isTaskDialogOpen: false,\r\n            isConfirmationOpen: false,\r\n            titleInputValue: \"\",\r\n            dateInputValue: moment().format(\"YYYY-MM-DD\"),\r\n            descriptionInputValue: \"\",\r\n            dialogTitle: \"\",\r\n            editableItemId: \"\",\r\n            itemToDelete: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const data = JSON.parse(localStorage.getItem(\"data\")) || [];\r\n        this.setState({ data });\r\n    }\r\n\r\n    onCreate = () => {\r\n        this.setState({\r\n            isTaskDialogOpen: true,\r\n            editableItemId: \"\",\r\n        });\r\n    };\r\n\r\n    closeDialog = () => {\r\n        this.setState({\r\n            isTaskDialogOpen: false,\r\n            titleInputValue: \"\",\r\n            dateInputValue: moment().format(\"YYYY-MM-DD\"),\r\n            descriptionInputValue: \"\",\r\n        });\r\n    };\r\n\r\n    onSave = () => {\r\n        const {\r\n            titleInputValue,\r\n            descriptionInputValue,\r\n            dateInputValue,\r\n            data,\r\n            editableItemId,\r\n        } = this.state;\r\n        const item = {\r\n            id: editableItemId || Date.now(),\r\n            title: titleInputValue,\r\n            date: dateInputValue,\r\n            description: descriptionInputValue,\r\n            checked: false,\r\n        };\r\n        if (editableItemId) {\r\n            const newData = this.deepClone(this.state.data);\r\n            const item = newData.find((task) => task.id === editableItemId);\r\n            Object.assign(item, {\r\n                title: titleInputValue,\r\n                date: dateInputValue,\r\n                description: descriptionInputValue,\r\n            });\r\n            this.setState({ data: newData }, this.updateLocalStorage);\r\n        } else {\r\n            this.setState(\r\n                {\r\n                    data: [item, ...data],\r\n                },\r\n                this.updateLocalStorage\r\n            );\r\n        }\r\n        this.closeDialog();\r\n    };\r\n\r\n    onEdit = (id) => {\r\n        const item = this.state.data.find((task) => task.id === id);\r\n        this.setState({\r\n            editableItemId: id,\r\n            titleInputValue: item.title,\r\n            dateInputValue: item.date,\r\n            descriptionInputValue: item.description,\r\n            isTaskDialogOpen: true,\r\n        });\r\n    };\r\n\r\n    onDelete = (id) => {\r\n        const item = this.state.data.find((task) => task.id === id);\r\n        this.setState({\r\n            isConfirmationOpen: true,\r\n            itemToDelete: this.deepClone(item),\r\n        });\r\n    };\r\n\r\n    onDeleteConfirm = () => {\r\n        const newData = this.deepClone(this.state.data);\r\n        const indexToDelete = newData.findIndex(\r\n            (task) => task.id === this.state.itemToDelete.id\r\n        );\r\n        newData.splice(indexToDelete, 1);\r\n        this.setState(\r\n            {\r\n                isConfirmationOpen: false,\r\n                data: newData,\r\n                itemToDelete: null,\r\n            },\r\n            this.updateLocalStorage\r\n        );\r\n    };\r\n\r\n    onDeleteCancel = () => {\r\n        this.setState({\r\n            isConfirmationOpen: false,\r\n            itemToDelete: null,\r\n        });\r\n    };\r\n\r\n    updateLocalStorage = () => {\r\n        localStorage.setItem(\"data\", JSON.stringify(this.state.data));\r\n    };\r\n\r\n    handleChange = (name) => (event) => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    resetDialogState = () => {\r\n        this.setState({\r\n            titleInputValue: \"\",\r\n            dateInputValue: moment().format(\"YYYY-MM-DD\"),\r\n            descriptionInputValue: \"\",\r\n        });\r\n    };\r\n\r\n    deepClone = (data) => {\r\n        return JSON.parse(JSON.stringify(data));\r\n    };\r\n\r\n    onCheck = (id) => {\r\n        const newData = this.deepClone(this.state.data);\r\n        const item = newData.find((task) => task.id === id);\r\n        item.checked = !item.checked;\r\n        this.setState({ data: newData }, this.updateLocalStorage);\r\n    };\r\n\r\n    onMove = (id, direction) => {\r\n        const data = this.deepClone(this.state.data);\r\n        const index = data.findIndex((task) => task.id === id);\r\n        if (direction === \"up\") {\r\n            if (index !== 0) {\r\n                [data[index - 1], data[index]] = [data[index], data[index - 1]];\r\n            }\r\n        } else {\r\n            if (index !== this.state.data.length - 1) {\r\n                [data[index], data[index + 1]] = [data[index + 1], data[index]];\r\n            }\r\n        }\r\n        this.setState({ data }, this.updateLocalStorage);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            data,\r\n            isTaskDialogOpen,\r\n            isConfirmationOpen,\r\n            titleInputValue,\r\n            descriptionInputValue,\r\n            dateInputValue,\r\n            itemToDelete,\r\n        } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <Paper className=\"main\">\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                        className=\"add-new-task\"\r\n                        onClick={this.onCreate}\r\n                    >\r\n                        Добавить\r\n                    </Button>\r\n                    <List className=\"list\">\r\n                        {data.map((item, index) => (\r\n                            <TaskListItem\r\n                                data={item}\r\n                                key={item.id}\r\n                                onCheck={() => this.onCheck(item.id)}\r\n                                onEdit={() => this.onEdit(item.id)}\r\n                                onDelete={() => this.onDelete(item.id)}\r\n                                onMove={this.onMove}\r\n                                position={\r\n                                    data.length === 1\r\n                                        ? \"only\"\r\n                                        : index === 0\r\n                                        ? \"first\"\r\n                                        : index === data.length - 1\r\n                                        ? \"last\"\r\n                                        : \"middle\"\r\n                                }\r\n                            />\r\n                        ))}\r\n                    </List>\r\n                </Paper>\r\n                <Dialog open={isTaskDialogOpen} onClose={this.closeDialog}>\r\n                    <DialogTitle className=\"task-dialog-header\">\r\n                        {this.state.editableItemId\r\n                            ? \"Редактирование\"\r\n                            : \"Создание\"}\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <div className=\"title-and-date\">\r\n                            <TextField\r\n                                label=\"Заголовок\"\r\n                                variant=\"outlined\"\r\n                                className=\"title-input\"\r\n                                value={titleInputValue}\r\n                                onChange={this.handleChange(\"titleInputValue\")}\r\n                            />\r\n                            <TextField\r\n                                label=\"Deadline\"\r\n                                variant=\"outlined\"\r\n                                type=\"date\"\r\n                                value={dateInputValue}\r\n                                onChange={this.handleChange(\"dateInputValue\")}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <TextField\r\n                            multiline\r\n                            fullWidth\r\n                            label=\"Описание\"\r\n                            variant=\"outlined\"\r\n                            value={descriptionInputValue}\r\n                            onChange={this.handleChange(\r\n                                \"descriptionInputValue\"\r\n                            )}\r\n                            rowsMax={6}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button color=\"secondary\" onClick={this.closeDialog}>\r\n                            Отмена\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={this.onSave}>\r\n                            Сохранить\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Dialog\r\n                    open={isConfirmationOpen}\r\n                    onClose={this.onDeleteCancel}\r\n                    onCancel={this.onDeleteCancel}\r\n                    onConfirm={this.onDeleteConfirm}\r\n                >\r\n                    <DialogTitle className=\"confirmation-header\">\r\n                        Удалить задачу\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <div>\r\n                            <p className=\"confirmation-text\">\r\n                                Вы действительно хотите безвозвратно удалить эту\r\n                                задачу?\r\n                            </p>\r\n                            <p>{itemToDelete && itemToDelete.title}</p>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.onDeleteCancel}>Нет</Button>\r\n                        <Button onClick={this.onDeleteConfirm}>Да</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TaskList from \"./components/TaskList/TaskList\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <TaskList />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}